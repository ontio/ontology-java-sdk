package com.github.ontio.smartcontract;

import com.alibaba.fastjson.JSONObject;
import com.github.ontio.OntSdk;
import com.github.ontio.OntSdkTest;
import com.github.ontio.account.Account;
import com.github.ontio.common.Address;
import com.github.ontio.common.Helper;
import com.github.ontio.crypto.SignatureScheme;
import com.github.ontio.sdk.exception.SDKException;
import com.github.ontio.smartcontract.wasmvm.DeployWasmCode;
import com.github.ontio.smartcontract.wasmvm.InvokeWasmCode;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class WasmVmTest {

    private OntSdk ontSdk;

    private Account payer;

    private String oep4Contract = "c3304fc12dbc38aa5c8e308b9236552523ffae0f";

    @Before
    public void setUp() throws Exception {
        ontSdk = OntSdk.getInstance();
        ontSdk.setRestful("http://polaris1.ont.io:20334");
        ontSdk.setDefaultConnect(ontSdk.getRestful());
        ontSdk.openWalletFile("NeoVmTest.json");
        payer = new Account(Helper.hexToBytes(OntSdkTest.PRIVATEKEY), SignatureScheme.SHA256WITHECDSA);
    }

    @Test
    public void makeDeployCodeTx() throws Exception {
        String code = "";
        String contractHash = "259eed30d30d7c473944760023fcc321b8966371";
        Assert.assertEquals(contractHash, Address.AddressFromVmCode(code).toHexString());
        DeployWasmCode tx = ontSdk.wasmvm().makeDeployCodeTransaction(code, "helloWorld", "1.0", "NashMiao",
                "wdx7266@vip.qq.com", "wasm contract for java sdk test", payer.getAddressU160(),
                500, 25000000);
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals(1, result.getIntValue("State"));
    }

    @Test
    public void makeAddInvokeCodeTx() throws Exception {
        String contractHash = "bf8ee176c360f7a77b9c45b6faab213bc50eaf5d";
        List<Object> params = new ArrayList<>(Arrays.asList(1, 2));
        InvokeWasmCode tx = ontSdk.wasmvm().makeInvokeCodeTransaction(contractHash, "add", params, payer.getAddressU160(), 500, 25000000);
        String targetPayload = "5daf0ec53b21abfab6459c7ba7f760c376e18ebf24036164640100000000000000000000000000000002000000000000000000000000000000";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("03000000000000000000000000000000", result.getString("Result"));
        params = new ArrayList<>(Arrays.asList(-2, 3));
        tx = ontSdk.wasmvm().makeInvokeCodeTransaction(contractHash, "add", params, payer.getAddressU160(), 500, 25000000);
        targetPayload = "5daf0ec53b21abfab6459c7ba7f760c376e18ebf2403616464feffffffffffffffffffffffffffffff03000000000000000000000000000000";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("01000000000000000000000000000000", result.getString("Result"));
    }

    @Test
    public void makeNotifyInvokeCodeTx() throws Exception {
        String contractHash = "bf8ee176c360f7a77b9c45b6faab213bc50eaf5d";
        List<Object> params = new ArrayList<>();
        InvokeWasmCode tx = ontSdk.wasmvm().makeInvokeCodeTransaction(contractHash, "notify", params, payer.getAddressU160(), 500, 25000000);
        String targetPayload = "5daf0ec53b21abfab6459c7ba7f760c376e18ebf07066e6f74696679";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("hello", result.getJSONArray("Notify").getJSONObject(0).getJSONArray("States").get(0));
    }

    @Test
    public void makeBalanceOfInvokeCodeTx() throws Exception {
        List<Object> params = new ArrayList<>(Collections.singletonList(Address.decodeBase58("ANDfjwrUroaVtvBguDtrWKRMyxFwvVwnZD")));
        InvokeWasmCode tx = ontSdk.wasmvm().makeInvokeCodeTransaction(oep4Contract, "balanceOf", params, payer.getAddressU160(), 500, 25000000);
        String targetPayload = "0faeff23255536928b308e5caa38bc2dc14f30c31e0962616c616e63654f6646b1a18af6b7c9f8a4602f9f73eeb3030f0c29b7";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("00e87648170000000000000000000000", result.getString("Result"));
    }

    @Test
    public void makeTotalSupplyInvokeCodeTx() throws Exception {
        List<Object> params = new ArrayList<>();
        InvokeWasmCode tx = ontSdk.wasmvm().makeInvokeCodeTransaction(oep4Contract, "totalSupply", params, payer.getAddressU160(), 500, 25000000);
        String targetPayload = "0faeff23255536928b308e5caa38bc2dc14f30c30c0b746f74616c537570706c79";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("00e87648170000000000000000000000", result.getString("Result"));
    }

    @Test
    public void makeTransferInvokeCodeTx() throws Exception {
        List<Object> params = new ArrayList<>(Arrays.asList(payer.getAddressU160(), Address.decodeBase58("AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve"), 10));
        InvokeWasmCode tx = ontSdk.wasmvm().makeInvokeCodeTransaction(oep4Contract, "transfer", params, payer.getAddressU160(), 500, 25000000);
        String targetPayload = "0faeff23255536928b308e5caa38bc2dc14f30c341087472616e73666572d2c124dd088190f709b684e0bc676d70c41b3776d2c124dd088190f709b684e0bc676d70c41b37760a000000000000000000000000000000";
        Assert.assertEquals(targetPayload, Helper.toHexString(tx.invokeCode));
        ontSdk.signTx(tx, new Account[][]{{payer}});
        JSONObject result = (JSONObject) ontSdk.getRestful().sendRawTransactionPreExec(tx.toHexString());
        Assert.assertEquals("01", result.getString("Result"));
        Assert.assertEquals(1, result.getIntValue("State"));
        JSONObject notify = result.getJSONArray("Notify").getJSONObject(1);
        Assert.assertEquals(oep4Contract, notify.getString("ContractAddress"));
        Assert.assertEquals("7472616e73666572", notify.getJSONArray("States").getString(0));
        Assert.assertEquals("d2c124dd088190f709b684e0bc676d70c41b3776", notify.getJSONArray("States").getString(1));
        Assert.assertEquals("d2c124dd088190f709b684e0bc676d70c41b3776", notify.getJSONArray("States").getString(2));
        Assert.assertEquals("0a000000000000000000000000000000", notify.getJSONArray("States").getString(3));
    }

}
